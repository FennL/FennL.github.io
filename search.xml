<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/07/17/%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/07/17/%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<hr><p>title:函数组件和类组件</p><hr><h1 id="函数组件和类组件"><a href="#函数组件和类组件" class="headerlink" title="函数组件和类组件"></a>函数组件和类组件</h1><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>实现函数组件最简单的方法就是编写<code>Javascript</code>函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;<span class="title class_">Hello</span>,&#123;props.<span class="property">name</span>&#125;&lt;h1&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在别的地方使用函数组件的方法:<code>&lt;Welcome name=&quot;fenn&quot;/&gt;</code></p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>除了函数组件，还有<code>ES6</code>提供的<code>class</code>定义组件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法一样，<code>&lt;Welcome name=&quot;fenn&quot;/&gt;</code></p><p>共同点：</p><ol><li>两种组件都无法自己修改自己的<code>props</code></li><li>两种组件都是单向数据流，改变了父组件的属性，子组件的视图也会更新</li><li><code>props</code>是外界传过来的，自己无法修改；<code>state</code>是自己本身的，自己可以修改，组件的<code>props</code>和<code>state</code>改变都会更新视图</li></ol><p>区别：</p><p>函数组件性能更高，没有实体化过程</p><h3 id="类组件和函数组件使用props-amp-state"><a href="#类组件和函数组件使用props-amp-state" class="headerlink" title="类组件和函数组件使用props&amp;state"></a>类组件和函数组件使用<code>props&amp;state</code></h3><ul><li><code>props</code>:</li></ul><p><code>props</code>是上层组件传递该层的数据接口，<strong>在子组件中只读</strong></p><p>类组件中读取:<code>this.props.xxx</code>;函数组件中读取:<code>props.xxx</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是父亲</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">message</span> = <span class="string">&quot;我是儿子&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;props.message&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>state</code></li></ul><p>类组件读取state:<code>this.state</code>,写入<code>this.setState</code>或者<code>this.setState(state=&gt;&#123;return &#123;n:state.n+1&#125;&#125;)</code>,推荐后者</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setstate</span>(&#123;<span class="attr">n</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">n</span>+<span class="number">1</span>&#125;);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setstate</span>(<span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">n</span>:state.<span class="property">n</span>+<span class="number">1</span>&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数组件用<code>usestate</code>返回数组，第一项读，第二项写，仍然没有this</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Son</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> [stateNum,stateSet] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>); <span class="comment">// 0是stateNum初始</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    现在的state数量是:&#123;stateNum&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;stateSet(n+1)&#125;&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setstate异步更新"><a href="#setstate异步更新" class="headerlink" title="setstate异步更新"></a>setstate异步更新</h3><p><code>React</code>并不像<code>Vue</code>是数据响应式，所以要更新UI，要使用<code>setState</code>，值得注意的是setstate是异步更新，所以UI更新也并不是立即变化，具体来说，多次状态修改会放在队列中，为了考虑性能，会将多次<code>setState</code>状态修改计算出最终结果后，只进行一次渲染。<code>props</code>的更新也是异步的</p><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>this指向是一个老生常谈的问题，再谈谈吧</p><p>react中的类组件中有三处<code>this</code>指向的是当前实例化对象（当前组件本身）</p><ul><li>构造函数</li></ul><p>结论好理解，构造函数中<code>this</code>指向当前组件。这里谈一下<code>new</code>运算符：先产生一个对象<code>&#123;&#125;</code>和一个指针<code>this</code>,<code>this</code>指向<code>&#123;&#125;</code>;运行构造函数 动态添加属性<code>&#123;&#125;.name=&quot;fenn&quot;,&#123;&#125;.age=3</code>，最后将对象赋值给<code>Dog</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 早期function创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">nanme,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Dog</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;dog&quot;</span>,<span class="number">3</span>)</span><br><span class="line"><span class="title class_">Dog</span>.<span class="title function_">say</span>()</span><br></pre></td></tr></table></figure><ul><li>render函数</li><li>其他的生命周期函数</li></ul><p>当this指向发生不清楚的时候，两种方案</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">x</span> = <span class="variable language_">this</span>.<span class="property">x</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">箭头函数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/10/hello-world/"/>
      <url>/2022/07/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的使用</title>
      <link href="/2022/07/10/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/10/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用"></a>Hexo使用</h3><p>前提，需要<code>node.js</code>环境</p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<code>Hexo</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="初始化博客项目"><a href="#初始化博客项目" class="headerlink" title="初始化博客项目"></a>初始化博客项目</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init blog ## 默认在桌面打开终端</span><br></pre></td></tr></table></figure><h4 id="进行本地预览"><a href="#进行本地预览" class="headerlink" title="进行本地预览"></a>进行本地预览</h4><p>依次输入下面命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new test_my_site ## 新建文章</span><br><span class="line">在文件夹项目打开终端或者使用cd命令切换进入文件夹</span><br><span class="line">hexo g ## 生成页面</span><br><span class="line">hexo s ## 启动预览</span><br></pre></td></tr></table></figure><p>浏览器中访问<code>http://localhost:4000</code>可以观察是否启动成功。</p><p><strong>Tips</strong>:如果出现<code>localhost拒绝了我们的连接请求</code>可能是端口被占用的原因，手动切换hexo端口<code>hexo server -p 5000</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h413ctor9nj20vh0u0jvz.jpg" alt="image-20220709232736222"></p><h4 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d ## hexo deploy</span><br><span class="line">hexo server # 监视文件变动 自动更新</span><br><span class="line">hexo server -p 5000 # 切换端口</span><br><span class="line">hexo server -i 192.168.1.1 # 自定义ip</span><br></pre></td></tr></table></figure><h4 id="推送到GitHub"><a href="#推送到GitHub" class="headerlink" title="推送到GitHub"></a>推送到GitHub</h4><p>在推送之前，需要对站点进行设置以让更多的人访问；对主题进行设置，选择自己喜欢的主题</p><p>打开站点配置文件<code>_config.yml</code> 其实就是给<code>hexo d</code>命令做相应配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://github.com/FennL/FennL.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>在这个项目中安装<strong>git部署插件</strong>:<code>npm install hexo-deployer-git --save</code></p><p>再重新启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h4><p>一般是需要设置主题，因为自带的主题是在是太简陋。</p><p>主题放在<code>/Blog/themes</code>下:</p><p>下载<code>next</code>主题：<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><p>站点修改配置:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">theme:next</span><br></pre></td></tr></table></figure><p>主题修改配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Scheme</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scheme:Muse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scheme:Mist</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scheme:Pisces 选一种</span></span><br><span class="line">scheme:Pisces</span><br></pre></td></tr></table></figure><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>进入博客所在目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p><code>source</code>文件夹会出现每一篇文章，写完文章之后运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>将文章渲染并发布</p><h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4><ul><li>启动服务出现一下乱码</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">“ &#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_template %&#125;</span><br></pre></td></tr></table></figure><p>hexo5.0之后缺少<code>swig</code>插件，需要自己安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure><ul><li><code>hexo d</code>出现报错</li></ul><p>使用<code>git</code>仓库的<code>ssh</code>地址，不要使用<code>https</code>地址</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
