<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/08/25/TypeScript%E7%AE%80%E5%8D%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/08/25/TypeScript%E7%AE%80%E5%8D%95%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 前端`axios`接口的封装</span><br><span class="line">date: 2022-07-21 12:00:00</span><br><span class="line">tags: </span><br><span class="line">    - axios</span><br><span class="line">    - typescript</span><br></pre></td></tr></table></figure><h1 id="TypeScript简单知识点"><a href="#TypeScript简单知识点" class="headerlink" title="TypeScript简单知识点"></a>TypeScript简单知识点</h1><h4 id="deno安装与执行"><a href="#deno安装与执行" class="headerlink" title="deno安装与执行"></a><code>deno</code>安装与执行</h4><p>使用<code>brew</code>安装或者使用原生shell安装命令安装</p><p>使用<code>deno run 文件名</code>可以直接执行或者使用<code>tsc</code>编译成<code>js</code>文件，再用解释器解释<code>js</code></p><h4 id="ts配置文件"><a href="#ts配置文件" class="headerlink" title="ts配置文件"></a><code>ts</code>配置文件</h4><p>在<code>tsconfig.json</code>中可以配置ts设置，比如编译成的配置</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span><span class="string">&quot;ES3&quot;</span><span class="punctuation">,</span> <span class="comment">// 编译成的版本 这里可以设置成ES2017</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code>所在文件夹默认就是这个项目文件夹，执行代码的时候就可以直接使用<code>tsc</code>，不用再输入文件夹名。</p><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>显示类型和隐式类型，推荐显式</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐式</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 显式</span></span><br><span class="line"><span class="keyword">let</span> a : <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b : <span class="built_in">any</span> = <span class="number">11</span>;</span><br><span class="line">b = <span class="string">&quot;hello&quot;</span> <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>):<span class="built_in">number</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>组合类型</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span>|<span class="built_in">number</span> = <span class="number">10</span>; <span class="comment">// a可能有两种类型 先赋值number</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span> <span class="comment">// </span></span><br><span class="line">========================</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NumStr</span> = <span class="title class_">String</span> | <span class="title class_">Number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="title class_">NumStr</span> = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="title class_">NumStr</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="string">&quot;on&quot;</span> | <span class="string">&quot;off&quot;</span> = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">c = <span class="string">&quot;off&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">  <span class="attr">title</span>:<span class="title class_">String</span>;</span><br><span class="line">  <span class="attr">author</span>:<span class="title class_">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> post : <span class="title class_">Post</span>=&#123;</span><br><span class="line">  <span class="attr">title</span>:<span class="string">&quot;HH&quot;</span>;</span><br><span class="line">  <span class="attr">author</span>:<span class="string">&quot;LF&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tup</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>,<span class="built_in">boolean</span>] = [<span class="number">1</span>,:<span class="string">&quot;Hello&quot;</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>React + Ant Design + TypeScript + UmiJS</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>react1 目录下同步到 gitlab，<code>.git</code>文件是在 react1 下</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>cd react-demo<br>npx create-react-app react1</p><h2 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h2><p>JSX 语法实际上就是<code>js</code>和<code>HTML</code>语法的混合，使用<code>js</code>的时候需要使用{}写上简单的表达式</p><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>组件化其实就是模块化,组件化思想延续了高内聚、低耦合的思想</p><h2 id="Props和State"><a href="#Props和State" class="headerlink" title="Props和State"></a>Props和State</h2><p>两者都是存储数据，props存储的是父组件传下来的数据，子组件里注入父组件里的数据；state存储的是自己的数据，state的修改需要使用<code>setOption</code>来改</p><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><p>React框架执行步骤：<code>getDefalultProps -&gt; getInitialState -&gt; componentWillMount -&gt;render -&gt; componentDidMount</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h3u6ya97i4j20n50p275d.jpg" alt="image-20220704001306824"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/25/Echarts%E5%9B%BE%E8%A1%A8/"/>
      <url>/2022/08/25/Echarts%E5%9B%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: Echarts图表</span><br><span class="line">date: 2022-08-25 12:00:00</span><br><span class="line">tags: </span><br><span class="line">    - react</span><br><span class="line">    - echarts</span><br></pre></td></tr></table></figure><h3 id="Echarts图表"><a href="#Echarts图表" class="headerlink" title="Echarts图表"></a>Echarts图表</h3><p>使用步骤：</p><ul><li><p>下载引入<code>echarts.js</code>文件</p><p>一般使用<code>npm</code>下载安装；或者CDN引入</p></li><li><p>准备一个具有大小的DOM容器</p></li><li><p>初始化<code>echarts</code>实例对象</p></li><li><p>指定配置项和数据</p></li><li><p>将配置项和数据给<code>echarts</code>实例对象</p></li></ul><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myChart = echart.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  <span class="attr">title</span>:&#123;&#125;, <span class="comment">// 图表标题</span></span><br><span class="line">  <span class="attr">tooltip</span>:&#123;&#125;, <span class="comment">// 图表提示框组件</span></span><br><span class="line">  <span class="attr">legend</span>:&#123;&#125;, <span class="comment">// 图例</span></span><br><span class="line">  <span class="attr">toolbox</span>:&#123;&#125; <span class="comment">// 工具箱组件 可以另存为图片</span></span><br><span class="line">  <span class="attr">grid</span>:&#123;&#125;    <span class="comment">// 图表实际内容的区域</span></span><br><span class="line">  <span class="attr">xAxis</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">yAxis</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">color</span>:[],</span><br><span class="line">  <span class="attr">series</span>:[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myChart.<span class="title function_">setOption</span>(option);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React易错点思考</title>
      <link href="/2022/07/31/React%E6%98%93%E9%94%99%E7%82%B9%E6%80%9D%E8%80%83/"/>
      <url>/2022/07/31/React%E6%98%93%E9%94%99%E7%82%B9%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="React易错点思考"><a href="#React易错点思考" class="headerlink" title="React易错点思考"></a>React易错点思考</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入口文件 index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="comment">// ReactDOM.render(组件名称，要注入的元素)</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementId</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="state的完整写法"><a href="#state的完整写法" class="headerlink" title="state的完整写法"></a><code>state</code>的完整写法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;  </span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">num</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">// 完整写法中的state是要写在构造器中</span></span><br><span class="line"><span class="comment">// 一般的省略写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    num : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="this的作用范围"><a href="#this的作用范围" class="headerlink" title="this的作用范围"></a><code>this</code>的作用范围</h5><p>在类组件里</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="variable language_">this</span>.<span class="property">B</span>&#125;&gt;&lt;/button&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="title function_">construct</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// this -&gt; A</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">B</span> = <span class="variable language_">this</span>.<span class="property">B</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>) <span class="comment">// 解决方法</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(</span><br><span class="line">  <span class="comment">// this -&gt; A</span></span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里的方法不在A属性上挂载，而是在A的原型对象上挂载，供A使用</span></span><br><span class="line">    <span class="comment">// 严格模式下 this -&gt; window</span></span><br><span class="line">    <span class="comment">// 非严格模式下 this -&gt; undefined</span></span><br><span class="line">    <span class="comment">// 问题来了：这里想要使用 A对象 的话就不能直接使用this了 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮，B方法只是赋值给onClick，实际调用B方法的并不是A对象，而是外层window/undefined【严格模式】</span></span><br></pre></td></tr></table></figure><h5 id="类组件的含义以及使用"><a href="#类组件的含义以及使用" class="headerlink" title="类组件的含义以及使用"></a>类组件的含义以及使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">   <span class="comment">// 1.构造器</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.渲染 往往需要调用初始state进行展示</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;isHot,wind &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot?&#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;,&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3.事件函数 往往对state进行set</span></span><br><span class="line">  <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:isHot&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类组件的简写形式 <strong>省略构造器</strong></p><p>原理是<em><strong>类中直接写赋值语句，属性直接会挂载在对象上，而不再是是原型</strong></em></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">isHot</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;isHot,wind &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot?&#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;,&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自定义方法</span></span><br><span class="line">  change = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:isHot&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数没有自己的<code>this</code>，如果用到<code>this</code>的话往往指的是外层的</p><h5 id="React中的展开表达式"><a href="#React中的展开表达式" class="headerlink" title="React中的展开表达式"></a>React中的展开表达式</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.函数传不定个数参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (...number)&#123;</span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 2.构造新对象展开场景</span></span><br><span class="line"><span class="keyword">const</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Person</span> &#123;...p&#125;/&gt; <span class="comment">// React中可以展开对象 但只可以用在标签中使用！！ 这个通用场景太差了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生React不可以展开对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...p) <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.修改对象属性</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;...person,<span class="attr">name</span>:<span class="string">&#x27;java&#x27;</span>,<span class="attr">address</span>:<span class="string">&#x27;shannxi&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="props对标签属性进行限制"><a href="#props对标签属性进行限制" class="headerlink" title="props对标签属性进行限制"></a><code>props</code>对标签属性进行限制</h5><p><code>React16</code>需要手动引入<code>props-types</code>来进行书写</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;&#125;</span><br><span class="line">&lt;<span class="title class_">Person</span> name=<span class="string">&#x27;tom&#x27;</span> age=&#123;<span class="number">18</span>&#125; sex=<span class="string">&quot;男&quot;</span>/&gt;</span><br><span class="line"><span class="comment">// 可以限制属性类型</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="title class_">PropsType</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">  <span class="attr">sex</span>:<span class="title class_">PropsType</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="title class_">PropsType</span>.<span class="property">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">defaultType</span> = &#123;</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&quot;女&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">=========================================</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propType = &#123;&#125;; <span class="comment">// 属性加到类上，不是加到实例对象上</span></span><br><span class="line">  <span class="keyword">static</span> defaultType = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="refs属性"><a href="#refs属性" class="headerlink" title="refs属性"></a>refs属性</h5><h6 id="字符串类型的ref"><a href="#字符串类型的ref" class="headerlink" title="字符串类型的ref"></a>字符串类型的<code>ref</code></h6><p>给组件添加<code>ref</code>属性，取代原生<code>js</code>中的<code>id</code>。之后拿到标签对应的真实DOM可以直接使用<code>this.refs.input</code>，而不用再<code>documentById</code>来拿到</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">showData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span>.<span class="property">refs</span>;  <span class="comment">// 可以这样拿到真实DOM</span></span><br><span class="line">  input1.<span class="property">value</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input ref=<span class="string">&quot;input1&quot;</span>/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>  <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">=======================================================</span><br><span class="line">showData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="title function_">ddocumentByID</span>(<span class="string">&#x27;input1&#x27;</span>)</span><br><span class="line">  input1.<span class="property">value</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input id=<span class="string">&quot;input1&quot;</span>/&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>  <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>字符串<code>ref</code>已废弃</p><p>匿名函数优点：<code>节省内存空间</code>,调用完临时对象立即释放</p><h6 id="回调类型的ref属性"><a href="#回调类型的ref属性" class="headerlink" title="回调类型的ref属性"></a>回调类型的<code>ref</code>属性</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;<span class="function">(<span class="params">a</span>)=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a)&#125;&#125;/&gt;</span><br><span class="line">=========================================</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(currentNode)</span>=&gt;</span>&#123;this.input1=currentNode&#125;&#125;/&gt;</span> <span class="comment">//将当前DOM挂载在当前组件对象的属性上</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调函数的定义：<strong>自己定义的，但不是自己调用的</strong>，这里只是自己定义的函数，是定义的，并不是调用的。</p><p>通过输出可以发现，这里的<code>a</code>其实是<strong>当前所属的DOM节点</strong> </p><h5 id="原生卸载组件"><a href="#原生卸载组件" class="headerlink" title="原生卸载组件"></a>原生卸载组件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;root&#x27;)) // 指明容器</span><br></pre></td></tr></table></figure><p>原生挂载组件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ReactDOM.render(组件名,容器名)</span><br></pre></td></tr></table></figure><h5 id="render调用机制"><a href="#render调用机制" class="headerlink" title="render调用机制"></a>render调用机制</h5><p>初始化的时候render就会调用一次，以后每一次状态发生变化render就会执行一次。</p><h5 id="常见钩子函数"><a href="#常见钩子函数" class="headerlink" title="常见钩子函数"></a>常见钩子函数</h5><ul><li><p>render:初始化之后、状态变化之后</p></li><li><p>componentDidMount: 组件挂载之后 <strong>页面一上来的时候特别适合使用，经常做初始化的事，比如开启定时器、网络请求、订阅消息</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置定时器，删除组件以及定时器</span></span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123; <span class="comment">// 这个定时器函数本身就是一个有限次的循环</span></span><br><span class="line">    <span class="keyword">let</span> &#123;opacity&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    opacity -=<span class="number">0.1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;opacity&#125;)</span><br><span class="line">  &#125;,<span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">death = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>componentWillUnmount:组件卸载之前 <strong>首尾工作，关闭定时器、取消订阅</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面三个hook函数是最主要的hook函数</p><p>其实这张图可以很好的说明一切，就不多说了</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h50qzgzl1bj211n0u0tb2.jpg" alt="钩子全家桶"></p><h5 id="新版本钩子"><a href="#新版本钩子" class="headerlink" title="新版本钩子"></a>新版本钩子</h5><p>在<code>React17</code>以上版本，钩子的名称发生了变化。</p><ul><li>componentWillMount -&gt; UNSAFE_componentWillMount</li><li>componentWillUpdate -&gt; UNSAFE_componentWillUpdate</li><li>componentWillReceiveProps -&gt; UNSAFE_componentWillReceiveProps</li></ul><p>使用旧版本名称的钩子，会发生警告，在18版本甚至只能使用新版本名称的钩子</p><h5 id="新生命周期"><a href="#新生命周期" class="headerlink" title="新生命周期"></a>新生命周期</h5><p>废弃componentWillMount、componentWillReiceiveProps、componentWillUpdate</p><p>新增getDerivedStateFromProps、getSnapshotBeforeUpdate，但是不常用</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Position详解</title>
      <link href="/2022/07/26/Position%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/07/26/Position%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Position详解"><a href="#Position详解" class="headerlink" title="Position详解"></a>Position详解</h1><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>默认，没有定位。不会受到<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>的影响。</p><h4 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h4><p>”元神出窍“，元神会相对于实体移动，方向可以是<code>向上</code>、<code>向下</code>、<code>向左</code>、<code>向右</code>来设置</p><h4 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h4><p>脱离正常的文档流，会<strong>浮</strong>出来，独立出来</p><h4 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h4><p>脱离文档流，并且会随着滚动条的滚动而滚动</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理和拦截器</title>
      <link href="/2022/07/26/%E4%BB%A3%E7%90%86%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2022/07/26/%E4%BB%A3%E7%90%86%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前端本地开发代理配置"><a href="#前端本地开发代理配置" class="headerlink" title="前端本地开发代理配置"></a>前端本地开发代理配置</h1><p>因为同源因素，前端开发过程中往往需要代理，实际上生产的时候不需要代理，后端用<code>nginx</code>同样可以处理跨域问题。</p><p>Vue框架中可以在<code>vue.config.js</code>中的<code>proxy</code>属性中更改配置;webpack也可以在<code>setProxy.js</code>文件中修改<code>proxy</code>属性</p><p>场景：本地开发<code>http://localhost</code>发往<code>http://www.vue.com/api/v1/topics</code>发生的跨域问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>:&#123; <span class="comment">// /api表示请求中/api开头的请求拦截</span></span><br><span class="line">      <span class="attr">target</span>:<span class="string">&#x27;http://www.vue.com/api&#x27;</span>, <span class="comment">// 这里的域名可以带路径，也可以不带路径，对应两种方案</span></span><br><span class="line">      <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request.js</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;api/v1/topic&#x27;</span>)</span><br><span class="line">==========================================================================</span><br><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>:&#123; </span><br><span class="line">      <span class="attr">target</span>:<span class="string">&#x27;http://www.vue.com.&#x27;</span>, <span class="comment">// 不带路径</span></span><br><span class="line">      <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// pathRewrite:&#123;        // 不需要对路径重写。因为拼接之后只剩下一个/api/</span></span><br><span class="line">      <span class="comment">//   &#x27;^/api&#x27;:&#x27;&#x27;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request.js</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;api/v1/topic&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以设置多个代理</p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p><a href="https://www.bilibili.com/index/ding.json">https://www.bilibili.com/index/ding.json</a> 本地向这个链接发送请求</p><ul><li>先配置跨域。将所有请求导向代理中的目标地址</li><li>创建<code>axios实例</code>以及对应的响应拦截器，请求拦截器</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span>&#123;</span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token &#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用<code>axios实例</code>进行正确发送</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> axios </tag>
            
            <tag> 代理 </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React配置代理解决跨域问题</title>
      <link href="/2022/07/21/React%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/21/React%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="React配置代理解决跨域问题"><a href="#React配置代理解决跨域问题" class="headerlink" title="React配置代理解决跨域问题"></a>React配置代理解决跨域问题</h2><p>跨域问题比较常见，而且几乎是必须解决的问题</p><p>比如本地<code>localhost:3000</code>是前端，后端<code>localhost:5000</code>是后端。直接通过<code>ajax</code>或者<code>axios</code>访问的话会被<code>ajax</code>引擎拦截，也就是前端实际就给拦截。但倘若使用代理的话，由于<strong>代理服务器没有<code>ajax</code>引擎拦截</strong>，所以可以发送通过。从而解决跨域问题</p><p>两种方法可以解决。</p><ol><li><p><code>Package.json</code>添加配置</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://localhost:5000&quot;</span></span><br></pre></td></tr></table></figure><p>好用，但是只能指向一个代理地址</p></li><li><p>使用<code>http-proxy-middleware</code>模块解决</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">app</span>) &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">proxy</span>(<span class="string">&#x27;/api1&#x27;</span>,&#123;</span><br><span class="line">      <span class="attr">target</span>:<span class="string">&quot;http://localhost:5000&quot;</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewite</span>:&#123;<span class="string">&#x27;^/api1&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求<code>https://localhost:3000/api1/student</code>,proxy里的<code>api1</code>匹配到请求地址3000后的<code>api1</code>,就把请求转向了target地址，又因为pathRewrite去换了<code>api1</code>，最终实际请求的地址是<code>https://localhost:5000/student</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 代理,react,前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack总结</title>
      <link href="/2022/07/21/Webpack%E6%80%BB%E7%BB%93/"/>
      <url>/2022/07/21/Webpack%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack前端详解"><a href="#Webpack前端详解" class="headerlink" title="Webpack前端详解"></a>Webpack前端详解</h1><p>常见前端打包工具 <code>Webpack</code>、<code>Parcel</code>、<code>Rollup</code></p><h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i webpack webpack-cli --save-dev</span><br><span class="line">// 全局安装webpack 在/opt/homebrew/webpack文件夹 可以使用which webpack来找 </span><br><span class="line">npm i -g webpack webpack-cli</span><br></pre></td></tr></table></figure><p>安装完成以后，模块会出现在<code>node_modules/bin</code>文件夹下</p><p>这个文件夹下的文件可以使用<code>npx</code>或者<code>yarn</code>命令运行起来</p><h4 id="运行webpack"><a href="#运行webpack" class="headerlink" title="运行webpack"></a>运行webpack</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>Webpack会默认从<code>src/index.js</code>文件开始打包，会把所有用到的模块打包在一起</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4ds4782haj20zc0epwgn.jpg" alt="image-20220720225104376"></p><p>Webpack4以后的版本支持<strong>零配置</strong>方式启动打包。从<code>index.js</code>文件开始找，找到两个js文件，并打包在<code>/dist/main.js</code>中  </p><p>之后在<code>HTML</code>中就可以这样写</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 里面没有export这种代码了</span><br><span class="line">不打包编译的话</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改webpack默认配置"><a href="#修改webpack默认配置" class="headerlink" title="修改webpack默认配置"></a>修改webpack默认配置</h4><p>默认配置无法满足我们的项目需求，需要对webpack进行个性化定制</p><p>新建<code>webpack.config.js</code>，在这里面写，名字不能变。这个文件运行在<code>node.js</code>环境中。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span> <span class="comment">// 指定项目的启动入口 不再是index.js</span></span><br><span class="line">  <span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span>, <span class="comment">// 输出文件名称</span></span><br><span class="line">    <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;output&#x27;</span>) <span class="comment">// 输出文件路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接使用<code>node.js</code>内置模块或者导入第三方的包！！！</p><ul><li>让配置文件支持只能提示</li></ul><p>vscode是根据类型做出提示判断，webpack配置文件中的js往往没有显式地类型说明，可以使用<code>webpack</code>中的<code>Configuration</code>来做js的注释，表明该对象的类型，从而达到只能提示的目的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Configuration</span>&#125; <span class="keyword">from</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@type &#123;Configuration&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>:<span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">  <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;output&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack工作模式"><a href="#webpack工作模式" class="headerlink" title="webpack工作模式"></a>webpack工作模式</h4><p>有生产模式、开发模式、none模式</p><p>修改webpack工作模式有两种方式：</p><ul><li>命令行CLI中 <code>--mode</code>参数传递</li><li>webpack配置文件中设置<code>mode</code>属性</li></ul><h4 id="加载器Loader"><a href="#加载器Loader" class="headerlink" title="加载器Loader"></a>加载器Loader</h4><p>webpack默认内置了js代码的加载器，将<code>js</code>代码打包成<code>bundule.js</code>.要想打包别的文件，就需要安装对应资源的<code>Loader</code>到项目中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i css-loader --save-dev</span><br></pre></td></tr></table></figure><p>加载器Loader配置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.css&#x27;</span> <span class="comment">// 不再是js 而是css</span></span><br><span class="line">  <span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span>, </span><br><span class="line">    <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;output&#x27;</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 根据文件名称决定是否使用这个loader</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>] <span class="comment">//  指定loader</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端`axios`接口的封装</title>
      <link href="/2022/07/21/%E5%89%8D%E7%AB%AFaxios%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2022/07/21/%E5%89%8D%E7%AB%AFaxios%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前端axios接口的封装"><a href="#前端axios接口的封装" class="headerlink" title="前端axios接口的封装"></a>前端<code>axios</code>接口的封装</h1><ol><li>创建<code>src/utils/request.js</code></li></ol><p>写普通的前端<code>js</code>代码使用<code>ES6</code>,若是写<code>node.js</code>(尤其写配置文件)则使用<code>commonJS</code>语法</p><p>封装接口的公共部分</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>:<span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><p>这段代码的封装结果就是得到了一个新的<code>request</code>函数,以后使用<code>axios</code>发送请求的时候就不会使用方法<code>axios</code>而是使用专用封装得到的<code>request</code>方法</p><p>实际发送请求使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;./utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/api/v4&quot;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;<span class="attr">username</span>:<span class="string">&quot;argo&quot;</span>,<span class="attr">password</span>: <span class="string">&quot;64172364&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以将多个这种<code>request</code>写在一个文件里，这个文件吸引了专门的axios请求操作，其他文件使用的时候来这个文件直接调用即可。等于是继续封装</p><p>新建<code>api/product.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getProduct</span>(<span class="params">id</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url : <span class="string">`/product/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateProduct</span>(<span class="params">id,data</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">    url : <span class="string">`/product/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">putProduct</span>(<span class="params">id</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url : <span class="string">`/product`</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">      <span class="attr">id</span>:<span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以继续深层封装</p><p>新建<code>api/index.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> product <span class="keyword">from</span> <span class="string">&quot;./product.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">&quot;./xxx.js&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">product,</span><br><span class="line">  xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再把整个api所有对象挂载到初始原型上，以方便<code>this</code>调用。Vue的话就是<code>Vue.prototype.$api = api</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> 前端 </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钩子Hook的作用</title>
      <link href="/2022/07/18/%E9%92%A9%E5%AD%90Hook%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2022/07/18/%E9%92%A9%E5%AD%90Hook%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是钩子Hooks"><a href="#什么是钩子Hooks" class="headerlink" title="什么是钩子Hooks"></a>什么是钩子Hooks</h2><p>React组件分为类组件和函数组件，函数组件的API一般叫做<code>钩子HooksAPI</code>,Facebook官方目前也在大力鼓励使用函数组件，因为其相对更高的效率。所以今天来谈一谈函数组件中常见的钩子函数</p><h2 id="纯函数与非纯函数"><a href="#纯函数与非纯函数" class="headerlink" title="纯函数与非纯函数"></a>纯函数与非纯函数</h2><p>函数组件的目的是返回组件的HTML代码，这种只进行构建HTML代码相关的函数叫做纯函数；其他含有与HMTL代码构建无关函数的 则是非纯函数，这些非相关函数也叫“副效应”</p><p>钩子就是为函数组件引入副效应的函数</p><h2 id="常见钩子"><a href="#常见钩子" class="headerlink" title="常见钩子"></a>常见钩子</h2><p>Hooks均是由react框架提供，使用时从<code>import &#123;useState&#125; from &#39;react&#39;</code>引入即可</p><p>专用钩子</p><ul><li><p>useState()：保存状态</p></li><li><p>useContext()：保存上下文</p></li><li><p>useRef():保存引用</p></li><li><p>……</p></li></ul><p>通用钩子</p><ul><li>useEffect()</li></ul><p>找不到对应钩子就可以用它</p><h2 id="useEffect用法"><a href="#useEffect用法" class="headerlink" title="useEffect用法"></a>useEffect用法</h2><p>每渲染一次，<code>useEffect</code>执行一次</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&quot;加载完成&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个参数：一个数组。是函数渲染的依赖项，只有第二个参数发生变化，才会执行第一个参数里的函数。避免次次渲染都执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&quot;加载完成&quot;</span></span><br><span class="line">  &#125;,[props.<span class="property">name</span>])</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果第二个参数是空数组，表明只会在第一次渲染的时候执行一次，后面渲染不会执行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    initLogin</span><br><span class="line">  &#125;,[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h2><ul><li>获取数据</li><li>改变DOM</li><li>输出日志</li><li>事件监听或订阅</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>函数组件和类组件</title>
      <link href="/2022/07/17/%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/07/17/%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="函数组件和类组件"><a href="#函数组件和类组件" class="headerlink" title="函数组件和类组件"></a>函数组件和类组件</h1><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>实现函数组件最简单的方法就是编写<code>Javascript</code>函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;<span class="title class_">Hello</span>,&#123;props.<span class="property">name</span>&#125;&lt;h1&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在别的地方使用函数组件的方法:<code>&lt;Welcome name=&quot;fenn&quot;/&gt;</code></p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>除了函数组件，还有<code>ES6</code>提供的<code>class</code>定义组件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法一样，<code>&lt;Welcome name=&quot;fenn&quot;/&gt;</code></p><p>共同点：</p><ol><li>两种组件都无法自己修改自己的<code>props</code></li><li>两种组件都是单向数据流，改变了父组件的属性，子组件的视图也会更新</li><li><code>props</code>是外界传过来的，自己无法修改；<code>state</code>是自己本身的，自己可以修改，组件的<code>props</code>和<code>state</code>改变都会更新视图</li></ol><p>区别：</p><p>函数组件性能更高，没有实体化过程</p><h3 id="类组件和函数组件使用props-amp-state"><a href="#类组件和函数组件使用props-amp-state" class="headerlink" title="类组件和函数组件使用props&amp;state"></a>类组件和函数组件使用<code>props&amp;state</code></h3><ul><li><code>props</code>:</li></ul><p><code>props</code>是上层组件传递该层的数据接口，<strong>在子组件中只读</strong></p><p>类组件中读取:<code>this.props.xxx</code>;函数组件中读取:<code>props.xxx</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是父亲</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">message</span> = <span class="string">&quot;我是儿子&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;props.message&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>state</code></li></ul><p>类组件读取state:<code>this.state</code>,写入<code>this.setState</code>或者<code>this.setState(state=&gt;&#123;return &#123;n:state.n+1&#125;&#125;)</code>,推荐后者</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setstate</span>(&#123;<span class="attr">n</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">n</span>+<span class="number">1</span>&#125;);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setstate</span>(<span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">n</span>:state.<span class="property">n</span>+<span class="number">1</span>&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数组件用<code>usestate</code>返回数组，第一项读，第二项写，仍然没有this</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Son</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> [stateNum,stateSet] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>); <span class="comment">// 0是stateNum初始</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    现在的state数量是:&#123;stateNum&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;stateSet(n+1)&#125;&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setstate异步更新"><a href="#setstate异步更新" class="headerlink" title="setstate异步更新"></a>setstate异步更新</h3><p><code>React</code>并不像<code>Vue</code>是数据响应式，所以要更新UI，要使用<code>setState</code>，值得注意的是setstate是异步更新，所以UI更新也并不是立即变化，具体来说，多次状态修改会放在队列中，为了考虑性能，会将多次<code>setState</code>状态修改计算出最终结果后，只进行一次渲染。<code>props</code>的更新也是异步的</p><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>this指向是一个老生常谈的问题，再谈谈吧</p><p>react中的类组件中有三处<code>this</code>指向的是当前实例化对象（当前组件本身）</p><ul><li>构造函数</li></ul><p>结论好理解，构造函数中<code>this</code>指向当前组件。这里谈一下<code>new</code>运算符：先产生一个对象<code>&#123;&#125;</code>和一个指针<code>this</code>,<code>this</code>指向<code>&#123;&#125;</code>;运行构造函数 动态添加属性<code>&#123;&#125;.name=&quot;fenn&quot;,&#123;&#125;.age=3</code>，最后将对象赋值给<code>Dog</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 早期function创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">nanme,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Dog</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;dog&quot;</span>,<span class="number">3</span>)</span><br><span class="line"><span class="title class_">Dog</span>.<span class="title function_">say</span>()</span><br></pre></td></tr></table></figure><ul><li>render函数</li><li>其他的生命周期函数</li></ul><p>当this指向发生不清楚的时候，两种方案</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">x</span> = <span class="variable language_">this</span>.<span class="property">x</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">箭头函数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Location对象和useLocaton函数</title>
      <link href="/2022/07/17/Location%E5%92%8CuseLocation/"/>
      <url>/2022/07/17/Location%E5%92%8CuseLocation/</url>
      
        <content type="html"><![CDATA[<h2 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h2><p><code>Location</code>对象表示当前URL的信息，是<code>window</code>对象的一部分，准确来说是<code>window</code>对象的一个属性，可以通过<code>window.location</code>来访问</p><ul><li><code>hash</code>：可读写<code>#</code>后的URL</li><li>host:可读写主机名和当前URL端口号</li><li>hostname:可读写主机名</li><li>href:可读写完整的URL</li><li>port:读写端口号</li><li>protocal:读写当前URL协议</li><li>search:读写从<code>?</code>开始的URL</li></ul><h2 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h2><p>返回当前URL的location对象。每当URL发生变化都会返回一个新的location对象</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>访问过的URL的信息。</p><ul><li>length:访问过的URL列表长度</li><li>back():后退</li><li>forward():前进</li><li>go()：兼具前进后退的功能</li></ul><h2 id="useHistory"><a href="#useHistory" class="headerlink" title="useHistory"></a>useHistory</h2><p>返回<code>history</code>对象。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/10/hello-world/"/>
      <url>/2022/07/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的使用</title>
      <link href="/2022/07/10/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/10/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用"></a>Hexo使用</h3><p>前提，需要<code>node.js</code>环境</p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<code>Hexo</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="初始化博客项目"><a href="#初始化博客项目" class="headerlink" title="初始化博客项目"></a>初始化博客项目</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init blog ## 默认在桌面打开终端</span><br></pre></td></tr></table></figure><h4 id="进行本地预览"><a href="#进行本地预览" class="headerlink" title="进行本地预览"></a>进行本地预览</h4><p>依次输入下面命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new test_my_site ## 新建文章</span><br><span class="line">在文件夹项目打开终端或者使用cd命令切换进入文件夹</span><br><span class="line">hexo g ## 生成页面</span><br><span class="line">hexo s ## 启动预览</span><br></pre></td></tr></table></figure><p>浏览器中访问<code>http://localhost:4000</code>可以观察是否启动成功。</p><p><strong>Tips</strong>:如果出现<code>localhost拒绝了我们的连接请求</code>可能是端口被占用的原因，手动切换hexo端口<code>hexo server -p 5000</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h413ctor9nj20vh0u0jvz.jpg" alt="image-20220709232736222"></p><h4 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d ## hexo deploy</span><br><span class="line">hexo server # 监视文件变动 自动更新</span><br><span class="line">hexo server -p 5000 # 切换端口</span><br><span class="line">hexo server -i 192.168.1.1 # 自定义ip</span><br></pre></td></tr></table></figure><h4 id="推送到GitHub"><a href="#推送到GitHub" class="headerlink" title="推送到GitHub"></a>推送到GitHub</h4><p>在推送之前，需要对站点进行设置以让更多的人访问；对主题进行设置，选择自己喜欢的主题</p><p>打开站点配置文件<code>_config.yml</code> 其实就是给<code>hexo d</code>命令做相应配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://github.com/FennL/FennL.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>在这个项目中安装<strong>git部署插件</strong>:<code>npm install hexo-deployer-git --save</code></p><p>再重新启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h4><p>一般是需要设置主题，因为自带的主题是在是太简陋。</p><p>主题放在<code>/Blog/themes</code>下:</p><p>下载<code>next</code>主题：<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><p>站点修改配置:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">theme:next</span><br></pre></td></tr></table></figure><p>主题修改配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Scheme</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scheme:Muse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scheme:Mist</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scheme:Pisces 选一种</span></span><br><span class="line">scheme:Pisces</span><br></pre></td></tr></table></figure><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>进入博客所在目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p><code>source</code>文件夹会出现每一篇文章，写完文章之后运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>将文章渲染并发布</p><h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4><ul><li>启动服务出现一下乱码</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">“ &#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_template %&#125;</span><br></pre></td></tr></table></figure><p>hexo5.0之后缺少<code>swig</code>插件，需要自己安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure><ul><li><code>hexo d</code>出现报错</li></ul><p>使用<code>git</code>仓库的<code>ssh</code>地址，不要使用<code>https</code>地址</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
